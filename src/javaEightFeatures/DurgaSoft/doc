Where the Python, R, Scala used 10 lines of code there java used 100 line of code because they are functional programming language.
Concise  code = write less code instead of N number of code.
python, scala support functional programming language.
Other are procedure programming , functional programming where java is OOP.
In general mathematics term lambda came in 1930...
Main purpose of Lambda expression is to enable functional programming in java.
We can handle a function just like object by lambda.


Java 8 features
1. Lambda Expressions
2. Functional Interface
3. Default methods and static methods
4. Predefined Functional Interfaces
   Predicate
   function
   Consumer
   supplier
   etc
5. Double colon Operator (::)
   Method reference
   Constructor reference
6. Stream
7. Date and Time Api
8. Optional class
9. Nashorn JavaScript Engine
10.etc

Lisp is the first programming language where lambda is used first.
Its very unfortunate that lambda came in java after Ruby, python, C, C++, Scala. Because Java People was Ego for function programming
because they was proud only for t the OOP
Main Objective Of lambda Expression is : To bring benefit of functional Programming in Java.
lambda expression is an ananymous function.
 Nameless
 without return type
 without modifiers
For example : we want to write a method which will print a "Hello world" message
public void m1(){
System.out.println("Hello world");
}
Insted of doing upper code we can handle it by lambda expression(ananymous function: nameless, no return type, no modifiers)

() -> {System.out.println("Hello World");}

concise code : (int n) - > { return n*n ;}
               (int n) - > return n*n; //if only single statement then we can remove {}
               (int n> - > n*n; //if there is no {} then return key word can be omit
               (n) - > n*n; //here compile will gues the argument type
If we want to invoke lambda expression compulsary functional interface must be needed.the job of FI is to call
lambda expression.

Functional interface : If a interface has only one abstruct method.
An interface which contain SAM(Simple Abstruct Method)
All this folloing things by default constructor as functional interface
in multiThereding - Runnable ==> run()
compareable ==> compareTo()
comparator ==> compare()
actionListner ==> actionPerformed()
Callable ==> call()
